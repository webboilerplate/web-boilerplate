//////////////////////////////
// Sprite Images
//////////////////////////////

$icons-sprite-dimensions: true;

// @import "utils/retina-sprites";

// import this once for all sprites
//  $sprites: sprite-map("sprites/icons/*.png", $spacing: 20px);

// import 1x sprites from buttons subfolder
//  $sprites2x: sprite-map("sprites-retina/icons/*.png", $spacing: 40px);
//
//  @include retina-sprite(autoren-arrow);
//
//



@import "compass/utilities/sprites";         // Include compass sprite helpers
@import "compass/css3/background-size";      // Include helper to calc background size


@mixin retina-sprite($name, $hover: false, $active: false) {
  @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
}

@mixin retina-sprite-pad($name, $padding-left: 0, $padding-top: 0) {
  @include _retina-sprite($name, $sprites, $sprites2x, false, false, false,  $padding-left, $padding-top);
}

// The general purpose retina sprite mixin.
  //
  //    @include retina-sprite(name, $spritemap1, $spritemap2)
  //    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $padding-top: 0])
  //
  //    If `dimensions` is true, then width/height will also be set.
  //
  //    if `pad` is non-zero, then that's how much padding the element will have (requires
  //    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
  //
@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true,  $padding-left: 0,$padding-top: 0) {
  @if $dimensions == true {
    @include sprite-dimensions($sprites, $name);
  }
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name,$padding-left, $padding-top);
  background-repeat: no-repeat;

  @if $hover == true {
    $name_hover: $name + _hover;
    &:hover {
      background-position: sprite-position($sprites, $name_hover,$padding-left, $padding-top);
    }
  }
  @if $active == true {
    $name_active: $name + _active;
    &:active {
      background-position: sprite-position($sprites, $name_active,$padding-left, $padding-top);
    }
  }

  @if $padding-top > 0 {
    padding-top: $padding-top;
  }
  @if $padding-left > 0 {
    padding-left: $padding-top;
  }

  @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
    & {
      $pos: sprite-position($sprites2x, $name, $padding-left * 2, $padding-top * 2);
      background-image: sprite-url($sprites2x);
      background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
      @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
      //  sprite-path() returns the path of the generated sprite sheet, which
      //  image-width() calculates the width of. the ceil() is in place in case
      //  you have sprites that have an odd-number of pixels in width

      @if $hover == true {
        $name_hover: $name + _hover;    // create myButton_hover and assign it
        &:hover{
          $pos: sprite-position($sprites2x, $name_hover, $padding-left * 2, $padding-top * 2);
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
      }
      @if $active == true {
        $name_active: $name + _active;    // create myButton_active and assign it
        &:active{
          $pos: sprite-position($sprites2x, $name_active, $padding-left * 2, $padding-top * 2);
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
      }
    }
  }
}
